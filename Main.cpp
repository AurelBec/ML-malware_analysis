#include "Classifiers.hpp"

using namespace std;
using namespace boost;
using namespace boost::lambda;
using namespace boost::filesystem;

int main(int argc, char *argv[])
{
    clock_t begin(clock());
    srand(time(NULL));

    set<int> sets(DEFAULT_SETS);
    uint percent(DEFAULT_C_PERCENT);
    uint nbtests(DEFAULT_C_NBTESTS);
    bool ready(true), paramChanged(false);
    path pathDataSet(DEFAULT_PATH_DATASET), pathHashDico(DEFAULT_PATH_HASHDICO);

    for (int i(1); i < argc; ++i)
    {
        vector<string> tokArgs;

        if(string(argv[i]) == "help")
        {
            if(string(argv[0]) == "./classifier")
            {
                cout << "\033[1mFamily Classifier for android malwares\033[0m" << endl;
                cout << "  \033[1m\033[1mOutputs:\033[0m FAMILY" << endl;
                cout << "  \033[1mMethod:\033[0m Bayesian approach" << endl;
            }
            else if(string(argv[0]) == "./detector")
            {
                cout << "\033[1mBinary Classifier for android applications\033[0m" << endl;
                cout << "  \033[1m\033[1mOutputs:\033[0m MALWARE | NON MALWARE" << endl;
                cout << "  \033[1mMethod:\033[0m Bayesian approach" << endl;
            }

            cout << endl << "  \033[1mOptions:\033[0m" << endl;
            cout << "    --percent=\033[4mNUMBER\033[0m" << endl;
            cout << "        Defines the percentage of the set to use for training (0 - 100)" << endl;
            cout << "        default: " << percent << endl;
            cout << "    --nbtests=\033[4mNUMBER\033[0m" << endl;
            cout << "        Defines the number of tests to run for evaluating" << endl;
            cout << "        default: " << nbtests << endl;
            cout << "    --sets=\033[4mNUMBER, ..., NUMBER\033[0m" << endl;
            cout << "        Defines the sets used by the classifier" << endl;
            cout << "        default: ALL" << endl;
            cout << "    --pathDS=\033[4mPATH\033[0m" << endl;
            cout << "        Defines the path to the directory containing the manifests" << endl;
            cout << "        default: " << DEFAULT_PATH_DATASET << endl;
            cout << "    --pathHD=\033[4mPATH\033[0m" << endl;
            cout << "        Defines the path to the file containing the SHA1 HASH of known malwares" << endl;
            cout << "        default: " << DEFAULT_PATH_HASHDICO << endl;
            cout << endl << "Aurelien BEC, nov. 2017" << endl;

            return EXIT_SUCCESS;
        }
        else if(argv[i][0] != '-' && argv[i][1] != '-')
            cout << "Warning: invalid command " << argv[i] << endl;
        else
        {
            string args = string(argv[i]).substr(2);
            split(tokArgs, args, is_any_of("=,"));
        }

        string arg(tokArgs[0]);
        if(arg == "percent")
        {
            paramChanged = true;
            percent = stoi(tokArgs[1]);
        }
        else if(arg == "nbtests")
        {
            paramChanged = true;
            nbtests = stoi(tokArgs[1]);
        }
        else if(arg == "sets")
        {
            sets.clear();
            for (uint i(1); i < tokArgs.size(); ++i)
                sets.insert(stoi(tokArgs[i]));
        }
        else if(arg == "pathDS")
        {
            paramChanged = true;
            pathDataSet = path(tokArgs[1]);

            if(!is_directory(pathDataSet))
            {
                cout << "Fatal: " << pathDataSet << " not a directory" << endl;
                ready = false;
            }
        }
        else if(arg == "pathHD")
        {
            paramChanged = true;
            pathHashDico = path(tokArgs[1]);

            if(!is_regular_file(pathHashDico))
            {
                cout << "Fatal: " << pathHashDico << " not a regular file" << endl;
                ready = false;
            }
        }
        else
        {
            ready = false;
            cout << "Fatal: unknown parameter " << arg << endl;
        }
    }


    if(!ready) return EXIT_FAILURE;


    cout << "Parameters: " << (paramChanged ? "(changed)" : "(default)") << endl;
    cout << "  path to dataset directory: " << pathDataSet.string() << endl;
    cout << "  path to hash dictionary: " << pathHashDico.string() << endl;
    cout << "  percent of malwares used for training: " << percent << endl;
    cout << "  number of tests after training: " << nbtests << endl;
    if(sets.size() == 8)
        cout << "  sets used: all" << endl;
    else if(sets.size() == 1)
        cout << "  set used: S" << (*(sets.begin())) << "-" << SubSet::name(*(sets.begin()) - 1) << endl;
    else
        for (set<int>::iterator it = sets.begin(); it != sets.end(); ++it)
            cout << "  " << ((it == sets.begin())? "sets used:":"          ") << " S" << *it << "-" << SubSet::name(*it - 1) << endl;


    if(string(argv[0]) == "./classifier")
    {
        FamilyClassifier classifier(pathDataSet, pathHashDico, sets, percent);
        classifier.evaluate(nbtests);
    }
    else if(string(argv[0]) == "./detector")
    {
        MalwareDetector detector(pathDataSet, pathHashDico, sets, percent);
        detector.evaluate(nbtests);
    }

    if(DEBUG_ON) cout << endl << "D: Classifier running in " << (clock() - begin) / CLOCKS_PER_SEC << "s" << endl ;

    return EXIT_SUCCESS;
}
